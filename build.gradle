buildscript
{
    repositories 
    {
        jcenter()
        maven { url = "http://files.minecraftforge.net/maven" }
    }
    
    dependencies 
    {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
    }
}

apply plugin: 'net.minecraftforge.gradle.forge'

if (project.hasProperty("dev")) 
{
    version += "-" + dev
}

group = "mchorse.mappet"
archivesBaseName = "mappet"
sourceCompatibility = targetCompatibility = "1.8"

compileJava {
    sourceCompatibility = targetCompatibility = "1.8"
}

minecraft 
{
    version = "1.12.2-14.23.3.2655"
    runDir = "run"
    
    mappings = "snapshot_20171003"
    
    clientJvmArgs = ["-Xmx1G"]
    serverJvmArgs = ["-Xmx1G"]

    replace "%VERSION%", project.version
    replace "%MCLIB%", project.mclib
    replace "%METAMORPH%", project.metamorph
    replace "%BLOCKBUSTER%", project.blockbuster
    replace "%APERTURE%", project.aperture
}

dependencies {
    compileOnly files("run/libs/blockbuster-${blockbuster}-${project.minecraft.version}-dev.jar")
    compileOnly files("run/libs/metamorph-${metamorph}-${project.minecraft.version}-dev.jar")
    compileOnly files("run/libs/mclib-${mclib}-${project.minecraft.version}-dev.jar")
    compileOnly files("run/libs/aperture-${aperture}-${project.minecraft.version}-dev.jar")
}

processResources
{
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    project.version += "-" + project.minecraft.version

    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
        
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

/* Dev build */
task deobfJar(type: Jar) {
    from sourceSets.main.output
    classifier = 'dev'
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allJava
    classifier = 'sources'
}

artifacts {
    archives deobfJar
    archives sourcesJar
}

task scriptingJavadocs(type: Javadoc) {
    source = sourceSets.main.allJava

    include "mchorse/mappet/api/ui/components/**"
    include "mchorse/mappet/client/gui/utils/graphics/Graphic**"
    include "mchorse/mappet/api/scripts/user/**"
}

task scriptingJavadocsJson(type: Exec) {
    // Writing gradle tasks is PAIN, if you'll ever would need to run this, clone and build:
    // https://github.com/mchorse/jsonDoclet
    //
    // Rename it to jsonDoclet.jar, and place it in the run/ folder
    executable "javadoc"
    args "-doclet", "mchorse.utils.doclets.JsonDoclet", "-docletpath", "./run/jsonDoclet.jar", "-sourcepath", "./src/main/java/", "-subpackages", "mchorse.mappet.api.scripts.user:mchorse.mappet.api.ui.components:mchorse.mappet.client.gui.utils.graphics"

    doLast {
        file("src/main/resources/assets/mappet/docs.json").setText(file("docs.json").text)
    }
}

tasks.processResources.dependsOn(scriptingJavadocsJson)

/* Comparing keys */
task compareLangFiles {
    doLast {
        def help = file("src/main/resources/assets/${project.archivesBaseName}/lang/")
        def parse = { File file ->
            def map = new HashMap()
            def splits = file.text.split("\n");

            for (split in splits) {
                def index = split.indexOf("=")

                if (index == -1) {
                    continue
                }

                map.put(split.substring(0, index), true)
            }

            return map
        }
        
        if (!help.exists()) {
            return
        }

        def en = file("${help.getAbsolutePath()}/en_US.lang")
        def en_map = parse(en)

        for (lang_file in help.listFiles()) {
            if (!lang_file.name.endsWith(".lang") || lang_file.name.startsWith("en_US")) {
                continue
            }

            def lang_map = parse(lang_file)
            def missing = new ArrayList()
            def extra = new ArrayList()

            for (key in en_map.keySet()) {
                if (!lang_map.containsKey(key)) {
                    missing.add(key)
                }
            }

            for (key in lang_map.keySet()) {
                if (!en_map.containsKey(key)) {
                    extra.add(key)
                }
            }

            missing.sort()
            extra.sort()

            print("\n")

            if (!missing.isEmpty() || !extra.isEmpty()) {
                if (!missing.isEmpty()) {
                    print("Language file ${lang_file.getName()} misses following keys:\n")

                    for (key in missing) {
                        print("- ${key}\n")
                    }
                }

                if (!extra.isEmpty()) {
                    print("Language file ${lang_file.getName()} has additional keys:\n")

                    for (key in extra) {
                        print("- ${key}\n")
                    }
                }
            }
            else {
                print("Language file ${lang_file.getName()} fully matches ${en.getName()}!\n")
            }
        }
    }
}

task copyLangStrings {
    doLast {
        def parse = { File file ->
            def map = new HashMap()
            def splits = file.text.split("\n");

            for (split in splits) {
                def index = split.indexOf("=")

                if (index == -1) {
                    continue
                }

                map.put(split.substring(0, index), split.substring(index + 1))
            }

            return map
        }
        
        def help = file("src/main/resources/assets/${project.archivesBaseName}/lang/")
        def en = file("${help.getAbsolutePath()}/en_US.lang")

        for (file in help.listFiles())
        {
            if (file.name.endsWith(".lang") && !file.name.startsWith("en_"))
            {
                def strings = parse(file)
                def splits = en.text.split("\n")

                for (def i = 0; i < splits.length; i++) {
                    def str = splits[i];

                    if (str.contains("=")) {
                        def index = str.indexOf("=")
                        def key = str.substring(0, index)
                        def value = str.substring(index)

                        if (strings.containsKey(key)) {
                            splits[i] = key + "=" + strings.get(key)
                        }
                    }
                }

                file.write(splits.join("\n"))

                print("Wrote to ${file.name}...")
            }
        }

        print("Done!")
    }
}